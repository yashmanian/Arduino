#include <Servo.h>

Servo myServo[3];

const int servoOffset[3] = {15, 12, 12};                      // My servos Offsets (why cannt I have good servos ????? !@!@#@#$)
const char vectorForces[6][6] = {{'R','F','L','F','B','B'},   //0
                                  {'L','F','B','B','R','B'},  //1 
                                  {'B','B','R','B','L','B'},  //2    // Force vector and its direction pairs 
                                  {'R','B','L','B','B','F'},  //3    // (R,F = Right Servo Forward , B,B= Back Servo Backward etc.)
                                  {'L','B','B','F','R','F'},  //4
                                  {'B','F','R','F','L','F'},  //5
                                  }; 
                                    
const int archAreaLimits[7] = {0, 60, 120, 180, 240, 300, 360};        // Split the plane in arches
const int maxBackwardSpeed = 1300;                                     // Pulses for max speed back
const int maxForwardSpeed = 1700;                                      // Pulses for max speed ahead
const int centerPosition = (maxBackwardSpeed + (maxForwardSpeed - maxBackwardSpeed) / 2);  // calculate pulses for stop position
const int speedDif = maxForwardSpeed - centerPosition;


int totalSpeed = 100;                                                   // Max rover speed percentanse (future use)
int moveDirection;                                                      // The direction to move in degrees (0,360=ahead, 90=right, 180=back, 270=left and all between ;) )
int servoSpeed[3] = {centerPosition, centerPosition, centerPosition};   // Array for Servo movement (init with Stop)
int debug = 0;                                                          // Debug Level = 1 for serial output to terminal.
int start = 1;                                                          // To check if we just start
int demo = 1;                                                           // Demo mode, use some specific directions

void setup() 
{
  myServo[0].attach(3);      //
  myServo[1].attach(4);      //  Attach the servos
  myServo[2].attach(5);      //
  if (debug){
    Serial.begin(9600);      // To Debug or not To Debug is that a question ??? ;)
    Serial.println("*** OmniBOT ***");
  }
  moveServo(servoSpeed);     // Init the servos to center (stop)
  delay(2000);               // It starts too fast for my old hands ;) so lets force it wait  
  digitalWrite(13, HIGH);    // Start indicator
  delay(3000);               // It starts too fast for my old hands ;) so lets force it wait  
}

void loop() {
  //int moveDirection = 240;                         // Use this for a predefind direction
  while(demo)
  {
    for (int specDir = 0; specDir < 360; specDir += 30)
    {
      if (debug){
        Serial.print("Dir: ");
        Serial.println(specDir);
      }
      moveServo(calculateVectorForces(specDir));
      delay(3000);
    }
  }

  if (start)
  {
    moveDirection = 0;    // Just move ahead at start
   if (debug){
     Serial.print("StartDir: ");
     Serial.print(moveDirection);
    }
    moveServo(calculateVectorForces(moveDirection));
    delay(3000);
    start = 0;    
  }

  int moveDirection = (millis()%360) ;              // Pseudo-randomise Direction
  if (debug){
   Serial.print("Dir: ");
   Serial.print(moveDirection);
  }

  moveServo(calculateVectorForces(moveDirection));   // That is all ;) (for now)
  delay(3000);                                       // Do as above and wait
}


/*
** Functions Start
*/

/*
** int *calculateVectorForces(int moveDir)
** Does as it says, returns a pointer to an array with the final Servos Speed and rotation direction.
** this is the main function
** DOTO : split the calculations to smaller functions
*/
int *calculateVectorForces(int moveDir)
{
  int arch = 0;                        // Split the plane to archs, keeps the arch our direction is on
  char whichForcesToUse[6];            // Finds which vector forces we have to combine
  int  vectorForceAngle;               // at what angles
  int returnServoSpeed[3]={centerPosition, centerPosition, centerPosition};             // The final output (as pointer) no global var here
  int *returnVal = returnServoSpeed ;  // The  pointer
  
  
  for (int i = 0 ; i < 6 ; i++)
  {
    if (archAreaLimits[i] < moveDir)
    {
      arch = i;                        // Find on which arch we are 
    }
  }
  if (debug > 1){
  Serial.print(" Arch: ");
  Serial.println(arch);
  }
  for (int n = 0; n < 6; n++)
  {
    whichForcesToUse[n] = vectorForces[arch][n]; // Read the vectors from array for the specific arch
  }
  
  for (int n=0 ; n < 6; n += 2)                  // Walk through the vector forces to calculate
  {
    switch(whichForcesToUse[n])                  // Check them
    {
    case 'R':                             // Servo 0
        if (whichForcesToUse[n+1] == 'F') // RF
        {
          vectorForceAngle = abs(300 - moveDir);
          vectorForceAngle =  vectorForceAngle == 300 ? 0 : vectorForceAngle;
          vectorForceAngle = vectorForceAngle < 90 ? vectorForceAngle  : 90;
          returnServoSpeed[0] = int(centerPosition + (log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * speedDif));
        }else{                            //RB
          vectorForceAngle = abs(120 - moveDir);
          vectorForceAngle =  vectorForceAngle == 120 ? 0 : vectorForceAngle;
          vectorForceAngle = vectorForceAngle < 90 ? vectorForceAngle  : 90;
          returnServoSpeed[0] = int(centerPosition - (log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * speedDif));
        }
        if (debug > 1){
          Serial.print(" RightServo0 : ");
          Serial.print(log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * 1);
        }
      break;
    case 'L':                              // Servo 1
        if (whichForcesToUse[n+1] == 'F') //LF
        {
          vectorForceAngle = abs(60 - moveDir);
          vectorForceAngle =  vectorForceAngle == 60 ? 0 : vectorForceAngle;
          vectorForceAngle = vectorForceAngle < 90 ? vectorForceAngle  : 90;
          returnServoSpeed[1] = int(centerPosition - (log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * speedDif));
        }else{                            //LB
          vectorForceAngle = abs(240 - moveDir);
          vectorForceAngle =  vectorForceAngle == 240 ? 0 : vectorForceAngle;
          vectorForceAngle = vectorForceAngle < 90 ? vectorForceAngle  : 90;
          returnServoSpeed[1] = int(centerPosition + (log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * speedDif));
        }
        if (debug > 1){
          Serial.print(" LeftServo 1 : ");
          Serial.print(log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * 1); 
        }
      break;
    case 'B':                              // Servo 2
        if (whichForcesToUse[n+1] == 'F') //BF
        {
          vectorForceAngle = abs(270 - moveDir);
          vectorForceAngle =  vectorForceAngle == 270 ? 0 : vectorForceAngle;
          vectorForceAngle = vectorForceAngle < 90 ? vectorForceAngle  : 90;
          returnServoSpeed[2] = int(centerPosition - (log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * speedDif));
        }else{                            //BB
          vectorForceAngle = abs(90 - moveDir);
          vectorForceAngle =  vectorForceAngle == 90 ? 90 : vectorForceAngle;
          vectorForceAngle = vectorForceAngle < 90 ? vectorForceAngle  : 90;
          returnServoSpeed[2] = int(centerPosition + (log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * speedDif));
        }
        if (debug > 1){
          Serial.print(" BackServo 2 : ");
          Serial.print(log(1+(cos(convertDegreesToRad(vectorForceAngle))*1.718)) * 1);         
        }
      break;
    }
    if (debug){
      Serial.print(" Force: ");
      Serial.print(whichForcesToUse[n]);
      Serial.print(whichForcesToUse[n+1]);
      Serial.print(" Angle: ");
      Serial.println(vectorForceAngle);
    }
  }
  
  if (debug > 1){
    for (int n=0 ; n < 3; n++)
    {
    Serial.print("Servo [");
    Serial.print(n);
    Serial.print("] Speed: [");
    Serial.print(returnServoSpeed[n]);
    Serial.println("]");
    }
  }
  
  return returnVal;                                        // Return the final result as pointer to the array
}

/*
** void moveServo(int *servoRotation)
** Move Servos (what can I say ??? :))))
*/
void moveServo(int *servoRotation)
{
  int *pos = servoRotation;
  for (int i = 0; i < 3; i++)
  {
    myServo[i].writeMicroseconds(pos[i] + servoOffset[i]);
  }
}

/*
** float convertDegreesToRad (int degree)
** Convert Degrees to Rad for COS() maths
*/
float convertDegreesToRad (int degree)
{
  return (degree * 3.14)/180;
}